{
  "name": "Notifications Management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "/webhook/notifications",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Get Notifications Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "notifications-get"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/notifications",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Create Notification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        500
      ],
      "webhookId": "notifications-create"
    },
    {
      "parameters": {
        "httpMethod": "PUT",
        "path": "/webhook/notifications/*/read",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Mark Read Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        700
      ],
      "webhookId": "notifications-read"
    },
    {
      "parameters": {
        "httpMethod": "PUT",
        "path": "/webhook/notifications/mark-all-read",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Mark All Read Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        900
      ],
      "webhookId": "notifications-mark-all"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT n.*, \n  CASE \n    WHEN n.related_type = 'lead' THEN CONCAT(l.first_name, ' ', l.last_name)\n    WHEN n.related_type = 'task' THEN t.title\n    ELSE NULL\n  END as related_name\nFROM notifications n\nLEFT JOIN leads l ON n.related_type = 'lead' AND n.related_id = l.lead_id\nLEFT JOIN tasks t ON n.related_type = 'task' AND n.related_id = t.task_id\nWHERE n.user_id = {{ $json.user_id }}\n{{ $json.read !== undefined ? 'AND n.read = ' + $json.read : '' }}\n{{ $json.type ? 'AND n.type = \\'' + $json.type + '\\'' : '' }}\nORDER BY n.created_at DESC\nLIMIT {{ $json.limit || 50 }}"
      },
      "name": "Get Notifications Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        440,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-default",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO notifications (user_id, title, message, type, related_id, related_type, action_url, created_at)\nVALUES ({{ $json.user_id }}, '{{ $json.title }}', '{{ $json.message }}', '{{ $json.type }}', {{ $json.related_id || 'NULL' }}, {{ $json.related_type ? '\\'' + $json.related_type + '\\'' : 'NULL' }}, {{ $json.action_url ? '\\'' + $json.action_url + '\\'' : 'NULL' }}, NOW())\nRETURNING *"
      },
      "name": "Create Notification Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        440,
        500
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-default",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE notifications SET read = true, updated_at = NOW() WHERE notification_id = {{ $parameter.notificationId }} AND user_id = {{ $json.user_id }} RETURNING *"
      },
      "name": "Mark Read Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        440,
        700
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-default",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE notifications SET read = true, updated_at = NOW() WHERE user_id = {{ $json.user_id }} AND read = false RETURNING COUNT(*)"
      },
      "name": "Mark All Read Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        440,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-default",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node['Get Notifications Webhook'].json.headers.authorization }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Auth Check - Get",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        340,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node['Create Notification Webhook'].json.headers.authorization }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Auth Check - Create",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        340,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node['Mark Read Webhook'].json.headers.authorization }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Auth Check - Read",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        340,
        700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node['Mark All Read Webhook'].json.headers.authorization }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Auth Check - All",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        340,
        900
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"data\": {{ JSON.stringify($json) }} }"
      },
      "name": "Success Response - Get",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        640,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": true, \"data\": {{ JSON.stringify($json) }} }"
      },
      "name": "Success Response - Create",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        640,
        500
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": true, \"data\": {{ JSON.stringify($json) }} }"
      },
      "name": "Success Response - Read",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        640,
        700
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"success\": true, \"message\": \"All notifications marked as read\" }"
      },
      "name": "Success Response - All",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        640,
        900
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseStatusCode": 401,
        "responseBody": "{ \"error\": \"Unauthorized\" }"
      },
      "name": "Auth Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        340,
        1100
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseStatusCode": 500,
        "responseBody": "={ \"error\": \"Database error: \" + $json.message }"
      },
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        540,
        1100
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID from JWT token\nconst authHeader = $input.all()[0].json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { user_id: null };\n}\n\nconst token = authHeader.substring(7);\ntry {\n  // In a real implementation, you'd verify the JWT signature\n  const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n  \n  // Add query parameters from the request\n  const queryParams = $input.all()[0].json.query || {};\n  \n  return {\n    user_id: payload.userId,\n    ...queryParams\n  };\n} catch (error) {\n  return { user_id: null };\n}"
      },
      "name": "Extract User ID - Get",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        440,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID from JWT token and merge with request body\nconst authHeader = $input.all()[0].json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { user_id: null };\n}\n\nconst token = authHeader.substring(7);\ntry {\n  // In a real implementation, you'd verify the JWT signature\n  const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n  const requestBody = $input.all()[0].json.body || {};\n  \n  return {\n    user_id: payload.userId,\n    ...requestBody\n  };\n} catch (error) {\n  return { user_id: null };\n}"
      },
      "name": "Extract User ID - Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        440,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID and notification ID\nconst authHeader = $input.all()[0].json.headers.authorization;\nconst notificationId = $input.all()[0].json.params.path.split('/')[3]; // Extract from /webhook/notifications/{id}/read\n\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { user_id: null, notificationId };\n}\n\nconst token = authHeader.substring(7);\ntry {\n  const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n  \n  return {\n    user_id: payload.userId,\n    notificationId: parseInt(notificationId)\n  };\n} catch (error) {\n  return { user_id: null, notificationId };\n}"
      },
      "name": "Extract User ID - Read",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        440,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID from JWT token\nconst authHeader = $input.all()[0].json.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { user_id: null };\n}\n\nconst token = authHeader.substring(7);\ntry {\n  const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n  \n  return {\n    user_id: payload.userId\n  };\n} catch (error) {\n  return { user_id: null };\n}"
      },
      "name": "Extract User ID - All",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        440,
        800
      ]
    }
  ],
  "connections": {
    "Get Notifications Webhook": {
      "main": [
        [
          {
            "node": "Auth Check - Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Notification Webhook": {
      "main": [
        [
          {
            "node": "Auth Check - Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Read Webhook": {
      "main": [
        [
          {
            "node": "Auth Check - Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark All Read Webhook": {
      "main": [
        [
          {
            "node": "Auth Check - All",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notifications Query": {
      "main": [
        [
          {
            "node": "Success Response - Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Notification Query": {
      "main": [
        [
          {
            "node": "Success Response - Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Read Query": {
      "main": [
        [
          {
            "node": "Success Response - Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark All Read Query": {
      "main": [
        [
          {
            "node": "Success Response - All",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check - Get": {
      "main": [
        [
          {
            "node": "Extract User ID - Get",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check - Create": {
      "main": [
        [
          {
            "node": "Extract User ID - Create",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check - Read": {
      "main": [
        [
          {
            "node": "Extract User ID - Read",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check - All": {
      "main": [
        [
          {
            "node": "Extract User ID - All",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User ID - Get": {
      "main": [
        [
          {
            "node": "Get Notifications Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User ID - Create": {
      "main": [
        [
          {
            "node": "Create Notification Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User ID - Read": {
      "main": [
        [
          {
            "node": "Mark Read Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract User ID - All": {
      "main": [
        [
          {
            "node": "Mark All Read Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Toronto"
  },
  "createdAt": "2024-01-01T00:00:00.000Z",
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "id": "notifications-workflow",
  "tags": []
}