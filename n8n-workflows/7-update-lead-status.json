{
  "name": "Update Lead Status API",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "PUT",
        "path": "/leads/{{$parameter.leadId}}/status",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "leadstatus-webhook-001",
      "name": "Webhook Update Status",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 400]
    },
    {
      "parameters": {
        "jsCode": "// JWT Authentication and extract data\nconst authHeader = items[0].json.headers?.authorization || items[0].json.request?.headers?.authorization;\nconst leadId = items[0].json.params?.leadId || items[0].json.path?.split('/')[items[0].json.path?.split('/').length - 2];\nconst newStatus = items[0].json.body?.status;\n\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { error: 'Missing token', authenticated: false };\n}\n\nif (!leadId || !newStatus) {\n  return { error: 'Lead ID and status required', authenticated: false };\n}\n\n// Validate status\nconst validStatuses = ['New', 'Contacted', 'Qualified', 'Showing Scheduled', 'Offer Made', 'Closed Won', 'Closed Lost', 'Archived'];\nif (!validStatuses.includes(newStatus)) {\n  return { error: 'Invalid status', authenticated: false, validationError: true };\n}\n\nconst jwt = require('jsonwebtoken');\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';\nconst token = authHeader.split(' ')[1];\n\ntry {\n  const decoded = jwt.verify(token, JWT_SECRET);\n  return {\n    ...items[0].json,\n    isAuthenticated: true,\n    authUserId: decoded.userId,\n    authUserEmail: decoded.email,\n    leadId: leadId,\n    newStatus: newStatus\n  };\n} catch (err) {\n  return { isAuthenticated: false, error: err.message };\n}"
      },
      "id": "leadstatus-auth-001",
      "name": "JWT Auth & Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.isAuthenticated}}",
              "value2": true
            }
          ]
        }
      },
      "id": "leadstatus-authcheck-001",
      "name": "Auth Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "jsCode": "// Return appropriate error response\nconst errorType = items[0].json.validationError ? 400 : 401;\nconst errorMessage = items[0].json.validationError ? \n  'Invalid status. Valid options: New, Contacted, Qualified, Showing Scheduled, Offer Made, Closed Won, Closed Lost, Archived' :\n  'Unauthorized';\n\nreturn {\n  error: errorMessage,\n  statusCode: errorType\n};"
      },
      "id": "leadstatus-error-001",
      "name": "Format Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"{{$json.error}}\"}",
        "options": {
          "responseCode": "={{$json.statusCode}}"
        }
      },
      "id": "leadstatus-errorres-001",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 80]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads SET status = '{{$json.newStatus}}', updated_at = NOW() WHERE lead_id = {{$json.leadId}} AND user_id = {{$json.authUserId}} RETURNING lead_id, status, updated_at",
        "options": {}
      },
      "id": "leadstatus-update-001",
      "name": "Update Lead Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Real Estate CRM Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{$json.length}}",
              "value2": 0,
              "operation": "larger"
            }
          ]
        }
      },
      "id": "leadstatus-updated-001",
      "name": "Update Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"error\": \"Lead not found or access denied\"}",
        "options": {
          "responseCode": "404"
        }
      },
      "id": "leadstatus-notfound-001",
      "name": "Lead Not Found",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO interactions (lead_id, user_id, type, content, interaction_date, created_at) VALUES ({{$json.lead_id}}, {{$node['JWT Auth & Validation'].json.authUserId}}, 'Status Change', 'Status changed to {{$json.status}}', NOW(), NOW())",
        "options": {}
      },
      "id": "leadstatus-log-001",
      "name": "Log Status Change",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1340, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Real Estate CRM Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"message\": \"Lead status updated successfully\", \"data\": {\"leadId\": {{$json.lead_id}}, \"status\": \"{{$json.status}}\", \"updatedAt\": \"{{$json.updated_at}}\"}}",
        "options": {
          "responseCode": "200"
        }
      },
      "id": "leadstatus-success-001",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 400]
    }
  ],
  "connections": {
    "Webhook Update Status": {
      "main": [
        [
          {
            "node": "JWT Auth & Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JWT Auth & Validation": {
      "main": [
        [
          {
            "node": "Auth Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check": {
      "main": [
        [
          {
            "node": "Update Lead Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Response": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Status": {
      "main": [
        [
          {
            "node": "Update Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Success Check": {
      "main": [
        [
          {
            "node": "Log Status Change",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lead Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Status Change": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}