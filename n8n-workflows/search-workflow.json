{
  "name": "Search API",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "/webhook/search/leads",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Search Leads Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "search-leads"
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "/webhook/search/tasks",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Search Tasks Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        600
      ],
      "webhookId": "search-tasks"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node['Search Leads Webhook'].json.headers.authorization }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Auth Check - Leads",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        340,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node['Search Tasks Webhook'].json.headers.authorization }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "Auth Check - Tasks",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        340,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID and search parameters for leads\nconst authHeader = $input.all()[0].json.headers.authorization;\nconst queryParams = $input.all()[0].json.query || {};\n\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { user_id: null };\n}\n\nconst token = authHeader.substring(7);\ntry {\n  const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n  \n  return {\n    user_id: payload.userId,\n    query: queryParams.q || '',\n    status: queryParams.status || null,\n    priority: queryParams.priority || null,\n    source: queryParams.source || null\n  };\n} catch (error) {\n  return { user_id: null };\n}"
      },
      "name": "Extract Search Params - Leads",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        440,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract user ID and search parameters for tasks\nconst authHeader = $input.all()[0].json.headers.authorization;\nconst queryParams = $input.all()[0].json.query || {};\n\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n  return { user_id: null };\n}\n\nconst token = authHeader.substring(7);\ntry {\n  const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\n  \n  return {\n    user_id: payload.userId,\n    query: queryParams.q || '',\n    completed: queryParams.completed !== undefined ? queryParams.completed === 'true' : null,\n    priority: queryParams.priority || null,\n    leadId: queryParams.leadId ? parseInt(queryParams.leadId) : null\n  };\n} catch (error) {\n  return { user_id: null };\n}"
      },
      "name": "Extract Search Params - Tasks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        440,
        500
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Search leads with filters\nWITH user_leads AS (\n  SELECT * FROM leads \n  WHERE (assigned_to = {{ $json.user_id }} OR created_by = {{ $json.user_id }})\n)\nSELECT \n  lead_id,\n  first_name,\n  last_name,\n  email,\n  phone_number,\n  source,\n  status,\n  priority,\n  budget_min,\n  budget_max,\n  desired_location,\n  property_type,\n  bedrooms_min,\n  bathrooms_min,\n  notes,\n  ai_summary,\n  created_at,\n  updated_at,\n  last_contacted_at\nFROM user_leads\nWHERE (\n  -- Full text search across multiple fields\n  LOWER(first_name || ' ' || last_name || ' ' || COALESCE(email, '') || ' ' || COALESCE(phone_number, '') || ' ' || COALESCE(notes, '') || ' ' || COALESCE(desired_location, '')) \n  LIKE LOWER('%{{ $json.query }}%')\n)\n{{ $json.status ? 'AND status = \\'' + $json.status + '\\'' : '' }}\n{{ $json.priority ? 'AND priority = \\'' + $json.priority + '\\'' : '' }}\n{{ $json.source ? 'AND source = \\'' + $json.source + '\\'' : '' }}\nORDER BY \n  -- Prioritize exact matches in name and email\n  CASE \n    WHEN LOWER(first_name || ' ' || last_name) LIKE LOWER('%{{ $json.query }}%') THEN 1\n    WHEN LOWER(email) LIKE LOWER('%{{ $json.query }}%') THEN 2\n    ELSE 3\n  END,\n  updated_at DESC\nLIMIT 50"
      },
      "name": "Search Leads Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        640,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-default",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Search tasks with filters\nWITH user_tasks AS (\n  SELECT t.*, l.first_name, l.last_name, l.email as lead_email\n  FROM tasks t\n  LEFT JOIN leads l ON t.lead_id = l.lead_id\n  WHERE t.created_by = {{ $json.user_id }}\n)\nSELECT \n  task_id,\n  title,\n  description,\n  due_date,\n  priority,\n  completed,\n  lead_id,\n  first_name as lead_first_name,\n  last_name as lead_last_name,\n  lead_email,\n  created_at,\n  updated_at\nFROM user_tasks\nWHERE (\n  -- Full text search across task fields\n  LOWER(title || ' ' || COALESCE(description, '') || ' ' || COALESCE(first_name, '') || ' ' || COALESCE(last_name, '')) \n  LIKE LOWER('%{{ $json.query }}%')\n)\n{{ $json.completed !== null ? 'AND completed = ' + $json.completed : '' }}\n{{ $json.priority ? 'AND priority = \\'' + $json.priority + '\\'' : '' }}\n{{ $json.leadId ? 'AND lead_id = ' + $json.leadId : '' }}\nORDER BY \n  -- Prioritize exact matches in title\n  CASE \n    WHEN LOWER(title) LIKE LOWER('%{{ $json.query }}%') THEN 1\n    WHEN LOWER(description) LIKE LOWER('%{{ $json.query }}%') THEN 2\n    ELSE 3\n  END,\n  -- Show pending tasks first, then by due date\n  completed ASC,\n  CASE WHEN due_date IS NULL THEN 1 ELSE 0 END,\n  due_date ASC,\n  created_at DESC\nLIMIT 50"
      },
      "name": "Search Tasks Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        640,
        600
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-default",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format leads search results\nconst items = $input.all();\nif (!items.length || !items[0].json) {\n  return { data: [] };\n}\n\nconst leads = Array.isArray(items[0].json) ? items[0].json : [items[0].json];\n\n// Format each lead\nconst formattedLeads = leads.map(lead => ({\n  leadId: lead.lead_id,\n  firstName: lead.first_name,\n  lastName: lead.last_name,\n  email: lead.email,\n  phoneNumber: lead.phone_number,\n  source: lead.source,\n  status: lead.status,\n  priority: lead.priority,\n  budgetMin: lead.budget_min,\n  budgetMax: lead.budget_max,\n  desiredLocation: lead.desired_location,\n  propertyType: lead.property_type,\n  bedroomsMin: lead.bedrooms_min,\n  bathroomsMin: lead.bathrooms_min,\n  notes: lead.notes,\n  aiSummary: lead.ai_summary,\n  createdAt: lead.created_at,\n  updatedAt: lead.updated_at,\n  lastContactedAt: lead.last_contacted_at\n}));\n\nreturn { data: formattedLeads };"
      },
      "name": "Format Leads Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        840,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format tasks search results\nconst items = $input.all();\nif (!items.length || !items[0].json) {\n  return { data: [] };\n}\n\nconst tasks = Array.isArray(items[0].json) ? items[0].json : [items[0].json];\n\n// Format each task\nconst formattedTasks = tasks.map(task => ({\n  taskId: task.task_id,\n  title: task.title,\n  description: task.description,\n  dueDate: task.due_date,\n  priority: task.priority,\n  completed: task.completed,\n  leadId: task.lead_id,\n  leadName: task.lead_first_name && task.lead_last_name \n    ? `${task.lead_first_name} ${task.lead_last_name}`\n    : null,\n  leadEmail: task.lead_email,\n  createdAt: task.created_at,\n  updatedAt: task.updated_at\n}));\n\nreturn { data: formattedTasks };"
      },
      "name": "Format Tasks Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        840,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}"
      },
      "name": "Leads Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1040,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}"
      },
      "name": "Tasks Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1040,
        600
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseStatusCode": 401,
        "responseBody": "{ \"error\": \"Unauthorized\" }"
      },
      "name": "Auth Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        340,
        900
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseStatusCode": 500,
        "responseBody": "={ \"error\": \"Search error: \" + $json.message }"
      },
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        640,
        900
      ]
    }
  ],
  "connections": {
    "Search Leads Webhook": {
      "main": [
        [
          {
            "node": "Auth Check - Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Tasks Webhook": {
      "main": [
        [
          {
            "node": "Auth Check - Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check - Leads": {
      "main": [
        [
          {
            "node": "Extract Search Params - Leads",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auth Check - Tasks": {
      "main": [
        [
          {
            "node": "Extract Search Params - Tasks",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Auth Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Search Params - Leads": {
      "main": [
        [
          {
            "node": "Search Leads Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Search Params - Tasks": {
      "main": [
        [
          {
            "node": "Search Tasks Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Leads Query": {
      "main": [
        [
          {
            "node": "Format Leads Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Tasks Query": {
      "main": [
        [
          {
            "node": "Format Tasks Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Leads Results": {
      "main": [
        [
          {
            "node": "Leads Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Tasks Results": {
      "main": [
        [
          {
            "node": "Tasks Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Toronto"
  },
  "createdAt": "2024-01-01T00:00:00.000Z",
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "id": "search-workflow",
  "tags": []
}